esphome:
  name: esp-motor-02

  on_boot:
    priority: -100
    then:
      - stepper.report_position:
          id: my_stepper
          position: !lambda "return id(current_position);"
      - stepper.set_target:
          id: my_stepper
          target: !lambda "return id(current_position);"
      - stepper.set_speed:
          id: my_stepper
          speed: 1500 steps/s
      - cover.template.publish:
          id: rail_stepper
          current_operation: IDLE
          position: !lambda 'return (float(float(id(my_stepper).current_position) / float(id(end_position))));'
      - binary_sensor.template.publish:
          id: stepper_running_state
          state: OFF
esp32:
  board: nodemcu-32s
  framework:
    type: arduino
  
# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "zF61n/LMnLuwqfysnAr88tug3WsDAXYuTHEJRZ3VgD8="

ota:
  password: "8eb9c1ac28a588a6f5ef5c453c6d3280"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.31.8
    gateway: 192.168.31.1
    subnet: 255.255.255.0
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp-Motor-02 Fallback Hotspot"
    password: "5q1rHA4S5hRn"
  power_save_mode: NONE
  fast_connect: True
captive_portal:

web_server:
  port: 80

sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB 02"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
  - platform: template
    id: position_sensor
    name: "Position Sensor 02"
    lambda: |
        return  id(my_stepper).current_position;
  - platform: template
    id: end_position_sensor
    name: "End Position Sensor"
    lambda: |
        return  id(end_position);
        
button:
  - platform: template
    name: Calibrate 02
    id: calibration_button
    on_press:
      - script.execute: calibration_script
  - platform: restart
    name: "Rail 02 Restart"
  - platform: template
    name: Button Up
    id: button_up
    on_press:
      then:
        - stepper.report_position:
            id: my_stepper
            position: 0
        - stepper.set_target:
            id: my_stepper
            target: 1500

  - platform: template
    name: Button Down
    id: button_down
    on_press:
      then:
        - stepper.report_position:
            id: my_stepper
            position: 0
        - stepper.set_target:
            id: my_stepper
            target: -1500
  - platform: template
    name: Reset Running Sensor
    id: ResetRunningSensor
    on_press:
      then:
        - binary_sensor.template.publish:
            id: stepper_running_state
            state: OFF
script:
  - id: calibration_script
    then:
    - binary_sensor.template.publish:
        id: on_endstop
        state: OFF
    - stepper.set_speed:
        id: my_stepper
        speed: 4500 steps/s
    - binary_sensor.template.publish:
        id: stepper_running_state
        state: ON
    - if:
        condition:
          - binary_sensor.is_on: endstop1
        then:
          - logger.log: "State: 1"
          - globals.set:
                id: current_position
                value: '0'
          - stepper.report_position:
              id: my_stepper
              position: 0
        else:
          - logger.log: "Going home"
          - stepper.set_target:
              id: my_stepper
              target: '-1000000'
          - wait_until:
                binary_sensor.is_on: on_endstop
          - stepper.set_target:
              id: my_stepper
              target: !lambda return id(my_stepper).current_position;
          - logger.log: "At home"  
          - globals.set:
                id: current_position
                value: '0'
          - stepper.report_position:
              id: my_stepper
              position: 0
    - logger.log: "Going end"
    - binary_sensor.template.publish:
        id: on_endstop
        state: OFF
    - stepper.set_target:
        id: my_stepper
        target: '1000000'
    - wait_until:
        binary_sensor.is_on: on_endstop
    - stepper.set_target:
        id: my_stepper
        target: !lambda return id(my_stepper).current_position;
    - globals.set:
        id: current_position
        value: !lambda 'return id(my_stepper).current_position;'
    - delay: 1s
    - binary_sensor.template.publish:
        id: stepper_running_state
        state: OFF
    - binary_sensor.template.publish:
        id: on_endstop
        state: OFF
    - logger.log: "At the end"

globals:
  - id: end_position
    type: int
    initial_value: '117681'
  - id: current_position
    type: int
    initial_value: '0'
    restore_value: true

binary_sensor:
  - platform: template
    name: "Is Stepper Running 02"
    id: stepper_running_state
  - platform: template
    name: "On Endstop"
    id: on_endstop
  - platform: gpio
    pin: 
      number: 18
      inverted: true
    id: endstop1
    name: "End Stop 1 - 02"
    on_press :
      then:
        - stepper.set_target:
            id: my_stepper
            target: !lambda return id(my_stepper).current_position;
        - stepper.report_position:
            id: my_stepper
            position: 0
        - cover.template.publish:
            id: rail_stepper
            current_operation: IDLE
            position: !lambda 'return (float(float(id(my_stepper).current_position) / float(id(end_position))));'
        - cover.template.publish:
            id: rail_stepper
            current_operation: IDLE
            state: OPEN
        - globals.set:
            id: current_position
            value: !lambda 'return id(my_stepper).current_position;'
        - sensor.template.publish: 
            id: position_sensor
            state: !lambda 'return id(my_stepper).current_position;'
        - binary_sensor.template.publish:
            id: on_endstop
            state: ON
        - if:
            condition:
              not:
                - script.is_running: calibration_script
            then:
              - binary_sensor.template.publish:
                  id: stepper_running_state
                  state: OFF

  - platform: gpio
    pin: 
      number: 19
      inverted: true
    id: endstop2
    name: "End Stop 2 - 02"
    on_press :
      then:
        - stepper.set_target:
            id: my_stepper
            target: !lambda return id(my_stepper).current_position;
        - globals.set:
            id: current_position
            value: !lambda 'return id(my_stepper).current_position;'
        - globals.set: # Set global to current position
            id: end_position
            value: !lambda return id(my_stepper).current_position;
        - cover.template.publish:
            id: rail_stepper
            current_operation: IDLE
            position: !lambda 'return (float(float(id(my_stepper).current_position) / float(id(end_position))));'
        - cover.template.publish:
            id: rail_stepper
            state: CLOSED
        - sensor.template.publish: 
            id: position_sensor
            state: !lambda 'return id(my_stepper).current_position;'
        - binary_sensor.template.publish:
            id: on_endstop
            state: ON         
        - if:
            condition:
              not:
                - script.is_running: calibration_script
            then:
              - binary_sensor.template.publish:
                  id: stepper_running_state
                  state: OFF


stepper:
  - platform: a4988
    id: my_stepper
    step_pin: 5 #26
    dir_pin: 
      number: 21 #27
      inverted: false
    max_speed: 1500 #2000 steps/s

    # Optional:
    sleep_pin:
      number: 16 #14
      inverted: true
    acceleration: inf    #  steps/s^2
    deceleration: inf  #1000 steps/s^2

    #open state (opened) => start of the rail
    #close state (closed) => end of the rail
cover:
  - platform: template
    #device_class: NONE
    name: Rail Stepper 02
    id: rail_stepper
    open_action:
      - binary_sensor.template.publish:
          id: stepper_running_state
          state: ON
      - stepper.set_speed:
          id: my_stepper
          speed: 1500 steps/s
      - stepper.set_target:
          id: my_stepper
          target: 0
      - cover.template.publish:
          id: rail_stepper
          current_operation: !lambda |-
              return COVER_OPERATION_OPENING;
      - wait_until:
          binary_sensor.is_on: endstop1
      - sensor.template.publish: 
          id: position_sensor
          state: !lambda 'return id(my_stepper).current_position;'
      - cover.template.publish:
          id: rail_stepper
          current_operation: IDLE
          position: !lambda 'return 0;'
      - cover.template.publish:
            id: rail_stepper
            current_operation: IDLE
            state: OPEN
      - globals.set:
          id: current_position
          value: !lambda 'return 0;'
      - binary_sensor.template.publish:
          id: stepper_running_state
          state: OFF
    close_action:
      - binary_sensor.template.publish:
          id: stepper_running_state
          state: ON
      - stepper.set_speed:
          id: my_stepper
          speed: 1500 steps/s
      - stepper.set_target:
          id: my_stepper
          target: !lambda "return id(end_position);"
      - wait_until:
          binary_sensor.is_on: endstop2
      - cover.template.publish:
          id: rail_stepper
          current_operation: IDLE
          position: !lambda 'return 1;'
      - cover.template.publish:
            id: rail_stepper
            current_operation: IDLE
            state: CLOSED
      - globals.set:
          id: current_position
          value: !lambda 'return id(end_position);'
      - binary_sensor.template.publish:
          id: stepper_running_state
          state: OFF
    stop_action:
      - script.stop: calibration_script
      - stepper.set_target:
          id: my_stepper
          target: !lambda return id(my_stepper).current_position;
      - cover.template.publish:
          id: rail_stepper
          current_operation: IDLE
          position: !lambda 'return (1-(float(float(id(my_stepper).current_position) / float(id(end_position)))));'
      - globals.set:
          id: current_position
          value: !lambda 'return id(my_stepper).current_position;'
      - sensor.template.publish: 
          id: position_sensor
          state: !lambda 'return id(my_stepper).current_position;'
      - binary_sensor.template.publish:
          id: stepper_running_state
          state: OFF
    position_action:
      - logger.log: "Setting position"
      - binary_sensor.template.publish:
          id: stepper_running_state
          state: ON
      - stepper.set_target:
          id: my_stepper
          target: !lambda 'return ((1-float(pos)) * float(id(end_position)));'
      - cover.template.publish:
          id: rail_stepper
          current_operation: !lambda |-
              return COVER_OPERATION_CLOSING;
      - wait_until:
            lambda: |-
              return id(my_stepper).current_position == int((1-float(pos)) * float(id(end_position)));
      - cover.template.publish:
          id: rail_stepper
          current_operation: IDLE
          position: !lambda 'return 0;'
      - cover.template.publish:
            id: rail_stepper
            current_operation: IDLE
            state: CLOSED
      # - cover.template.publish:
      #       id: rail_stepper
      #       current_operation: IDLE
      - binary_sensor.template.publish:
          id: stepper_running_state
          state: OFF
    has_position: true

time:
  - platform: homeassistant
    id: homeassistant_time

#https://lab.evishome.com/esphome-ha-horizontal-blinds-automation/    